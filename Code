from pygame import *
window = display.set_mode((700,500))
display.set_caption('labirint')
run = True
finish =False
back=(250,250,0)
window.fill(back)
win = transform.scale(image.load('win.jpg'),(700,500)),(0,0)
loss = transform.scale(image.load('loss.jpg'),(700,500)),(0,0)

class GameSprite(sprite.Sprite):
    def __init__(self,picture,w,h,x,y):
        super().__init__()
        self.image = transform.scale(image.load(picture),(w,h))
        self.rect = self.image.get_rect()
        self.rect.x =x
        self.rect.y=y
    def reset(self):
        window.blit(self.image,(self.rect.x,self.rect.y))

wall = GameSprite('wall.png', 100,350,350,250)
wall1 = GameSprite('wall1.png', 300,100,150,200)
barriers = sprite.Group()
barriers.add(wall)
barriers.add(wall1)


class Player(GameSprite):
    def __init__(self,picture,w,h,x,y,x_speed,y_speed):
        super().__init__(picture,w,h,x,y)
        self.x_speed = x_speed
        self.y_speed = y_speed
    def update(self):
        self.rect.x += self.x_speed
        platforms_touched = sprite.spritecollide(self,barriers,False)
        if self.x_speed > 0:
            for p in platforms_touched:
                self.rect.right= min(self.rect.right,p.rect.left)
        elif self.x_speed < 0:
            for p in platforms_touched:
                self.rect.left= max(self.rect.left,p.rect.right)
        self.rect.y += self.y_speed
        platforms_touched = sprite.spritecollide(self,barriers,False)
        if self.y_speed > 0:
            for p in platforms_touched:
                self.rect.bottom= min(self.rect.bottom,p.rect.top)
        elif self.y_speed < 0:
            for p in platforms_touched:
                self.rect.top= max(self.rect.top,p.rect.bottom)
    def fire(self):
        bullet = Bullet('weapon.png',15,20, Ghost.rect.right, Ghost.rect.centery,25)
        bullets.add(bullet)

class Enemy(GameSprite):
    def __init__(self,picture,w,h,x,y,speed):
        super().__init__(picture,w,h,x,y)
        self.speed = speed
    def update(self):
        self.rect.x += self.speed
        if self.rect.x <= 450 or self.rect.x == 450:
            self.speed = 2
        if self.rect.x >= 600 or self.rect.x == 600:
            self.speed = -2


class Bullet(GameSprite):
    def __init__(self,picture,w,h,x,y,speed):
        super().__init__(picture,w,h,x,y)
        self.speed = speed
    def update(self):
        self.rect.x += self.speed
        if self.rect.x > 700:
            self.kill()
      
            
bullets = sprite.Group()
enemy = Enemy('Genemy.png',100,100,550,300,-2)
winner = GameSprite('winner.png',100,100,550,400)
Ghost = Player('Ghost.png', 50,50, 150,350,0,0)
win= GameSprite('win.jpg', 700,500,0,0)
loss=GameSprite('loss.jpg', 700,500,0,0)
monsters = sprite.Group()
monsters.add(enemy) 


while run:
    time.delay(50)
    for e in event.get():
        if e.type == QUIT:
            run = False
        if e.type == KEYDOWN:
            if e.key == K_s:
                Ghost.y_speed = 5
            if e.key == K_w:
                Ghost.y_speed = -5
            if e.key == K_d:
                Ghost.x_speed = 5
            if e.key == K_a:
                Ghost.x_speed = -5
            if e.key == K_SPACE:
                Ghost.fire()
        if e.type == KEYUP:
            if e.key == K_s:
                Ghost.y_speed = 0
            if e.key == K_w:
                Ghost.y_speed = 0
            if e.key == K_d:
                Ghost.x_speed = 0
            if e.key == K_a:
                Ghost.x_speed = 0

    if finish != True:
        window.fill(back)
        monsters.update()
        monsters.draw(window)
        winner.reset()
        Ghost.reset()
        barriers.update()
        barriers.draw(window)
        Ghost.update()
        bullets.update()
        bullets.draw(window)
        sprite.groupcollide(bullets, barriers, True, False)
        sprite.groupcollide(bullets, monsters, True, True)
        if sprite.collide_rect(Ghost, winner):
            finish = True
            win.reset()
        if sprite.collide_rect(Ghost, enemy):
            finish = True
            loss.reset()

    display.update()
